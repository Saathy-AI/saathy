name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests and Linters
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install Poetry
        run: |
          pip install poetry
          poetry config virtualenvs.create false

      - name: Install dependencies
        run: poetry install --with dev

      - name: Run linters
        run: poetry run ruff check .

      - name: Run unit tests
        run: poetry run pytest

  integration-test:
    name: Build and Smoke Test
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        config:
          - { name: "Development", compose_file: "docker-compose.dev.yml", env: "dev", port: 8000, base_url: "http://localhost:8000" }
          - { name: "Production", compose_file: "docker-compose.prod.yml", env: "prod", port: 80, base_url: "http://localhost" }

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and start services
        run: docker-compose -f ${{ matrix.config.compose_file }} up -d --build

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for API to be ready on port ${{ matrix.config.port }}..."
          max_wait=120
          current_wait=0
          while ! nc -z localhost ${{ matrix.config.port }}; do
            if [ $current_wait -ge $max_wait ]; then
              echo "Error: Timeout waiting for API to be ready."
              docker-compose -f ${{ matrix.config.compose_file }} logs
              exit 1
            fi
            sleep 5
            current_wait=$((current_wait + 5))
          done
          echo "API is ready."

      - name: Install test dependencies
        run: pip install requests colorama

      - name: Run smoke test
        run: |
          python scripts/smoke_test.py --base-url ${{ matrix.config.base_url }}
        env:
          ENV_FOR_TEST: ${{ matrix.config.env }}
